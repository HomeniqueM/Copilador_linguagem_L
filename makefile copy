# Detect the operating system
OS := $(shell uname)

# Set the compiler
ifeq ($(OS), Linux)
	CC = g++
else ifeq ($(OS), Windows_NT)
	CC = g++
else
	CC = g++
endif

# NASM and ld for assembly files
NASM = nasm
LD = ld
ASMSRC = program.asm
ASMOUT = arquivo.o
ASMEXE = teste

# Set the directories
SRCDIR = src
BUILDDIR = build
TARGET = $(BUILDDIR)/main

# Set the source files and object files
SRC = $(wildcard $(SRCDIR)/**/*.cpp $(SRCDIR)/*.cpp)
OBJ = $(SRC:$(SRCDIR)/%.cpp=$(BUILDDIR)/%.o)

# Set the flags
CFLAGS = -g -Wall -lstdc++fs

# Targets
all: $(TARGET) $(ASMEXE)

# Rule to compile the .cpp files
$(TARGET): $(OBJ)
	$(CC) $^ -o $@ $(CFLAGS)

# Rule to compile .cpp into .o files
$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	mkdir -p $(@D)
	$(CC) -c $< -o $@ $(CFLAGS)

# Rule to compile the .asm file into .o
$(ASMOUT): $(ASMSRC)
	$(NASM) $< -g -w-zeroing -f elf64 -o $@

# Rule to link the .o file into executable
$(ASMEXE): $(ASMOUT)
	$(LD) $< -o $@

.PHONY: clean run run_asm

# Rule to clean the build files
clean:
ifeq ($(OS), Linux)
	rm -rf $(BUILDDIR) $(ASMOUT) $(ASMEXE)
else ifeq ($(OS), Windows_NT)
	RMDIR /S /Q $(subst /,\\,$(BUILDDIR))
	del $(subst /,\\,$(ASMOUT))
	del $(subst /,\\,$(ASMEXE))
endif

# Rule to run the program
run: all
ifeq ($(OS), Linux)
	./$(TARGET)
	./$(ASMEXE)
else ifeq ($(OS), Windows_NT)
	$(TARGET)
	echo "NASM is not supported on Windows"
else
	echo "Unsupported OS"
endif

# Rule to run the assembly program
run_asm: $(ASMEXE)
	./$(ASMEXE)
